The ``matrix_divided`` module
=============================

``matriv_divided(matrix, div)``

``matrix_divided`` returns matrix containing lists of float results of division of
input matrix data consisting of integers & floats divided by div input of integer or
float type rounded to two decimal places

Using ``matrix_divided``:
-------------------------

Import the module using the following:

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Examples of responses to correct argument input:
================================================

All arguments contain only integer data:

    >>> matrix_divided([[3, 6, 9], [2, 4, 8]], 2)
    [[1.5, 3.0, 4.5], [1.0, 2.0, 4.0]]

All arguments contain only float data:

    >>> matrix_divided([[3.3, 6.6, 9.9], [2.2, 4.4, 8.8]], 3.0)
    [[1.1, 2.2, 3.3], [0.73, 1.47, 2.93]]

All arguments contain only negative integer data:

    >>> matrix_divided([[-3, -6, -9], [-2, -4, -8]], -2)
    [[1.5, 3.0, 4.5], [1.0, 2.0, 4.0]]

All arguments contain only negative float data:

    >>> matrix_divided([[-3.3, -6.6, -9.9], [-2.2, -4.4, -8.8]], -3.0)
    [[1.1, 2.2, 3.3], [0.73, 1.47, 2.93]]

Arguments contain mixed positive/negative integer/float data:

    >>> matrix_divided([[3, -6, 9.3], [-2.0, 4, 8.0]], 3.3)
    [[0.91, -1.82, 2.82], [-0.61, 1.21, 2.42]]

Infinity float div argument:

    >>> matrix_divided([[3, 6, 9], [2, 4, 8]], float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

NaN float div argument:

    >>> matrix_divided([[3, 6, 9], [2, 4, 8]], float('nan'))
    [[nan, nan, nan], [nan, nan, nan]]

Matrix contains one infinity float:

    >>> matrix_divided([[3, 6, 9], [2, float('inf'), 8]], 2)
    [[1.5, 3.0, 4.5], [1.0, inf, 4.0]]

Matrix contains one infinity float / div is infinity float:

    >>> matrix_divided([[3, 6, 9], [2, float('inf'), 8]], float('inf'))
    [[0.0, 0.0, 0.0], [0.0, nan, 0.0]]

Matrix contains one NaN float:

    >>> matrix_divided([[3, 6, 9], [2, float('nan'), 8]], 2)
    [[1.5, 3.0, 4.5], [1.0, nan, 4.0]]

Matrix contains one NaN float / div is NaN float:

    >>> matrix_divided([[3, 6, 9], [2, float('nan'), 8]], float('nan'))
    [[nan, nan, nan], [nan, nan, nan]]

``matrix_divided`` must raise an error upon receiving invalid arguments:
------------------------------------------------------------------------

Examples of responses to incorrect argument input:
==================================================

div argument is not int/float:

    >>> matrix_divided([[3, 6, 9], [2, 4, 8]], "Hi")
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[3, 6, 9], [2, 4, 8]], None)
    Traceback (most recent call last):
    TypeError: div must be a number

div argument is zero (division by zero):

    >>> matrix_divided([[3, 6, 6], [2, 4, 8]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Missing both arguments:

    >>> matrix_divided()
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Missing one argument:

    >>> matrix_divided([[3, 6, 9], [2, 4, 8]])
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

Excessive argument count:

    >>> matrix_divided([[3, 6, 9], [2, 4, 8]], 2, 6)
    Traceback (most recent call last):
    TypeError: matrix_divided() takes 2 positional arguments but 3 were given

Matrix contains non-int/float data:

    >>> matrix_divided([[3, 6, None], [2, "Hi", 8]], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix not rectangular:

    >>> matrix_divided([[3, 6, 9], [2, 4, 8, 10]], 2)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size
